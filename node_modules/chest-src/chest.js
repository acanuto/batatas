function defaultModule(build){
  // must return array of [occurrences, replace]
  this.build = build;
}

var getArgsReg = /\((\s*[^)]*)\)/;
function callArgs(string){
  var str = '.call(this';
  var args = string.match(getArgsReg);
  if (args[1]) str += ', ' + args[1];
  return str + ')';
}

module.exports = {
  extend: new defaultModule(function(ctt){
    var newcontent = ctt,
      supregex = /[^\_]super\b([^;]*)\;/g;

    while ((match = supregex.exec(ctt))) {
      var found = match[1], repl = 'this.__super';
      switch (found[0]) {
        case '.':
          var afterdot = found.substr(1).match(/([^\.]*)/),
              funct = afterdot[0].match(/\b(.*)\(/);
          if (funct)
            repl += 'p.' + funct[1] + callArgs(afterdot[0]);
          else
            repl += 'p' + found;
          break;
        case '(':
          repl += callArgs(found);
          break;
        default:
          throw 'Cannot interpret SUPER call';
      }
      newcontent = newcontent.replace(match[0], repl+';');
    }
    return newcontent;
  }),
  jmap: new defaultModule(),
  zipcookie: new defaultModule()
};
