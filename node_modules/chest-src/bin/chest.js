(function() {
  var m = {
    jmap: {
      unzip: function(j, map) {
        var f = {}, i = 0, c = j.length;
        while (i < c) {
          f[map[i]] = j[i];
          i += 1;
        }
        c = map.length;
        while (i < c) f[map[i++]] = "";
        return f;
      },
      zip: function(j, map) {
        var c = [], n = map.length, i = 0;
        while (i < n) {
          c.push(j[map[i]] || "");
          i += 1;
        }
        return c;
      },
      s_zip: function(j, map) {
        return JSON.stringify(this.zip(j, map));
      },
      s_unzip: function(str, map) {
        return this.unzip(JSON.parse(str), map);
      }
    }
  };
  function extend(cls, ext) {
    var fin = cls, extpro = ext.prototype, clspro = cls.prototype;
    finpro = Object.create(extpro);
    for (var n in clspro) finpro[n] = clspro[n];
    finpro.__super = ext;
    finpro.__superp = extpro;
    fin.prototype = finpro;
  }
  m.extend = extend;
  m.zipcookie = function() {
    var lstor = window.localStorage;
    return {
      get: function(name, map) {
        var item = lstor.getItem(name);
        if (item) return m.jmap.s_unzip(item, map); else return null;
      },
      set: function(name, j, map) {
        lstor.setItem(name, m.jmap.s_zip(j, map));
      }
    };
  }();
  var base = document.createElement("base");
  base.href = "http://" + document.location.host;
  document.head.appendChild(base);
  function require(name, callback) {
    if (callback) if (m[name]) callback(name, m[name]); else new view(name, callback); else return m[name];
  }
  var list = {}, g_unloaded = 0, chest_zmap = [ "deps", "css", "version" ];
  function module(name, skipinclude) {
    this.unloaded = 0;
    this.parents = [];
    this.deps = {};
    this.name = name;
    g_unloaded += 1;
    if (!skipinclude) {
      var script = document.createElement("script");
      script.src = "js/" + name + ".js";
      script.async = true;
      document.head.appendChild(script);
    }
    var c = m.zipcookie.get("chest_" + name, chest_zmap);
    if (!c) this.save = true; else this.predefine(c);
    list[name] = this;
  }
  module.prototype = {
    predefine: function(j) {
      var v;
      if (j && (!this.j || (v = j.version !== this.j.version))) {
        if (this.j) if (v) m.zipcookie.set("chest_" + this.name, j, chest_zmap); else if (this.save) m.zipcookie.set("chest_" + this.name, j, chest_zmap);
        this.j = j;
        if (this.j && v) {
          if (j.version !== this.j.version) m.zipcookie.set("chest_" + this.name, j, chest_zmap);
        } else if (this.save || j.version !== this.j.version) m.zipcookie.set("chest_" + this.name, j, chest_zmap);
        var i = 0, deps = j.deps, css = j.css, c = deps.length;
        while (i < c) {
          var dep, depname = deps[i++];
          this.unloaded += 1;
          if (!(dep = list[depname])) dep = new module(depname);
          this.deps[depname] = dep;
          if (dep.delivered) this.unloaded -= 1; else dep.parents.push(this);
        }
        i = 0;
        c = css.length;
        while (i < c) loadstyle(css[i++]);
        if (j.run) this.define(j);
        return true;
      }
      return false;
    },
    define: function(j) {
      if (!this.defined) {
        this.predefine(j);
        this.defined = true;
        this.run = j.run;
        if (!this.unloaded) this.deliver();
      }
    },
    deliver: function() {
      if (!this.delivered) {
        this.public = {
          exports: {}
        };
        this.delivered = true;
        this.run.call(null, require, this.public);
        m[this.name] = this.public.exports;
        var i = 0, parents = this.parents, c = parents.length;
        while (i < c) {
          var p = parents[i];
          if (!--p.unloaded && p.defined) p.deliver();
          i += 1;
        }
      }
      return this.public.exports;
    }
  };
  function view(name, callback) {
    this.__super.call(this, name);
    this.callback = callback;
  }
  view.prototype = {
    deliver: function() {
      this.callback(this.name, this.__superp.deliver.call(this));
    }
  };
  extend(view, module);
  var stylelist = {};
  function loadstyle(name) {
    if (!stylelist[name]) {
      var link = document.createElement("link");
      link.rel = "stylesheet";
      link.type = "text/css";
      link.href = "css/" + name + ".css";
      document.head.appendChild(link);
      stylelist[name] = true;
    }
  }
  window.define = function(name, deps, css, version, run) {
    (list[name] || new module(name, true)).define({
      deps: deps,
      css: css,
      version: version,
      run: run
    });
  };
  new module("main");
})();